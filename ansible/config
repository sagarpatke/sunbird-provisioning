#----------------------------------------------------------------------#
# Sunbird installation is working in 2 phases
#
# 1. Installing and configuring services and DBs (./sunbird_install.sh)
# 2. Installing the core services (./sunbird_install.sh -s core)
#
# Fields mentioned below are basic prerequisites for working ofsunbird
#----------------------------------------------------------------------#

#----------------------------------------------------------------------#
# Phase 1 : Installing and configuring docker and dbs
#----------------------------------------------------------------------#

#Basic
env: staging
implementation_name: stackroute
ssh_ansible_user: ubuntu
sudo_passwd:
ansible_private_key_path: ~/.ssh/id_rsa
proxy_prometheus: false             # Please set this variable to true if you want to use monitoring 

#Application
application_host: ec2-13-232-97-117.ap-south-1.compute.amazonaws.com              # Private ip of the application server
app_address_space: 10.10.2.0/24

#Proxy
dns_name: ec2-13-232-97-117.ap-south-1.compute.amazonaws.com
proto: http                             # http/https; if you're usig ip use http
cert_path:                          # Path to .cert file for nginx
key_path:                           # Path to .key file for nginx

#Database
database_host: ec2-35-154-228-47.ap-south-1.compute.amazonaws.com
database_password: secretive_bob
 
#Keycloak 
keycloak_admin_password: secretive_bob
sso_password: secretive_bob
trampoline_secret: secretive_bob

# Es configs
backup_storage_name: es-backup
backup_storage_key: sunbird-backup
es_etc_cluster_name: es-1

# Badger
badger_admin_password: secretive_bob                 # Admin (default admin user is admin, you can create new user using ./manage.py createsuperuser in badger container) password.
badger_admin_email: admin@example.com                    # Admin email address for badger 

#----------------------------------------------------------------------#
# Phase 2: Configuring core services
# ./sunbird_install.sh -s core
#----------------------------------------------------------------------#

# Badger
vault_badging_authorization_key:    # Authorization genrated from the badger service. (Please look for ~/badger_token.txt)

#Ekstep 
ekstep_api_base_url: https://qa.ekstep.in/api               # Qa: https://qa.ekstep.in/api & prod: https://api.ekstep.in
ekstep_proxy_base_url: https://qa.ekstep.in             # Qa: https://qa.ekstep.in  & prod: https://community.ekstep.in   

sunbird_auth_token:                 # JWT token generated by ansible. (You can get it from ~/jwt.txt).
ekstep_api_key: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIzODEzMjQyNjNhNjc0ZGQ5YmRjYTk5ZmJjZDk1OGJhMyIsImlhdCI6MTUyODA5MzcxMywiZXhwIjpudWxsLCJhdWQiOiIiLCJzdWIiOiIifQ.30JObCzBEn-rwedQICAwocKS3q5Dz6_2RY-yprzEkk4                    # Jwt token generated by the key,secret produced from the ekstep portal.
                                    # Please go through this url for more about jwt:
                                    # https://community.ekstep.in/developer-knowledgebase/45-getting-started-with-apis

sunbird_image_storage_url: https://stackroutestagingstorage.blob.core.windows.net/         # Azure storage url ex: https://sunbirdtest.blob.core.windows.net/dial/
sunbird_azure_storage_key: piIwO0lydA4TjzFsnsknsb5CVV+wPy+pyeZ1X8V4bJtjPi7P7Pf8Izg9ADK9n1fIYC9PTP9bB/VuNIBtatXPjA==         # Azure account storage key
sunbird_azure_storage_account: stackroutestagingstorage     # Azure account storage name

sunbird_environment: staging               # Sunbird environment eg: dev 
sunbird_instance: stackroute                  # Sunbird Implimentation name eg: test-implimentation 

#----------------------------------------------------------------------#
#----------------------------------------------------------------------#


## Advanced config

# DB IPs, Default will be database_host
elasticsearch_host: 
cassandra_host: 
postgres_master_host: 
postgres_slave_host: 
swarm_manager_host: 
swarm_node_host: 
keycloak_host: ec2-13-232-90-154.ap-south-1.compute.amazonaws.com
log_es_host: 

# Variables for monitoring
prometheus_host:
grafana_host:
alertmanager_host:

# Unique DB passwords, Default will be database_password
# If you have dbs pre installed, you have to fill the passwords, it's mandatory.
postgres_keycloak_password:
postgres_app_password:
postgres_kong_password:
postgres_badger_password:
cassandra_password:


sunbird_telemetry_pdata_id:           #some telemetry id which should available in ekstep 
sunbird_installation_email:           #  

#Logging   (mandatory fields if logging is required)
vault_google_client_id:         # Google oauth client id 
vault_google_client_secret:     # Google oauth client secret
vault_cookie_secret:            # Google oauth cookie secret
kibana_access_domain_list:      # Kibana access for all the users with this domain
kibana_access_mail_list:        # Kibana access for the mentioned users



#Monitoring (mandatory fields if monitoring is required) 
mail_server_host: #mail server host ex: smtp.sendgrid.net
mail_server_port: #mail server host ex: 587
mail_server_username: #username
mail_server_password: #password
vault_postgres_exporter_password: #password for the postgres exporter password
grafana_admin_password:  #grafana admin password
monitor_alerts_slack_url: #slack webhook url 
monitor_alerts_slack_channel: #slack channel for alerts
alerts_mailing_list:  #list of user mail id's who need alerts.
kong__test_jwt:  #kong test jwt token 
vault_proxy_prometheus_admin_creds: 



#es config
es_etc_node_datagroups['es']:
es_api_host: "{{ groups['es'][0] }}"
es_heap_size: 1500m
es_etc_discovery_zen_minimum_master_nodes: 1
es_snapshot_host: "{{ groups['es'][0] }}"
es_restore_host: "{{ groups['es'][0] }}"
snapshot_base_path: application